demo()
demo(nlm)
q()
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor = c(1,2,3,4,5,6,7,8,9,10,11,12)
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
m = matrix(data = c(1,2,3,4,5,6,7,8,9,10,11,12,
13,14,15,16,33,44,22,33,11,1,0,2,
2,44,55,35,45,7,3,6,1,2,3,4,
7,2,6,2,9,3,36,57,3,8,58,23), ncol = 4)
m
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
new_matrix = cbind(vetor, m)
new_matrix
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
the_table = read.table("https://grodri.github.io/datasets/effort.dat")
the_table
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes
#labels:
new_labels <-  c("config", "esfc", "chang")
colnames(the_table) <- new_labels
the_table
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no
the_table = read.table("https://grodri.github.io/datasets/iris.dat")
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no
iris_dataset = data(iris)
iris_dataset
head(iris_dataset)
data(iris)
head(data(iris))
iris
class(iris)
dim(iris)
summary(iris)
str(iris)
# Exercicio 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
plot(iris$Sepal.Length, iris$Sepal.Width)
# Exercicio 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
?subset
iris1 <- subset(iris, Sepal.Length > 7)
iris1
# Exercicio 9 - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: voce vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a funcao slice()
novo_iris <- iris
novo_iris
install.packages("dplyr")
library(dplyr)
?slice
slice(novo_iris, 1:15)
# Exercicio 10 - Use a funcao filter no seu novo dataframe criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a funcao filter
RSiteSearch('filter')
filter(novo_iris, Sepal.Length > 7)
filter(novo_iris, Sepal.Length > 7)
getwd()
hoje <- Sys.Date()
hoje
Sys.Time()
Sys.time()
Sys.timezone()
as.Date("2016-06-28")
as.Date("2024-06-09")
as.Date("Jun-09-24", format = "%b-%d-%y")
format(Sys.Date(), format = "%d %B, %Y")
my_time <- as.POSIXct("2024-06-09 11:24:134")
my_time
my_time + 1
demo("graphics")
?plot
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura
plot(altura, largura)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
# Plotando um dataframe
?lynx
plot(lynx)
plot(lynx, ylab="Plot com dataframes", xlab="")
plot(lynx, ylab="Plot com dataframes", xlab="Anos")
plot(lynx, ylab="Plot com dataframes", xlab="Anos", col="red")
#--
hist(warpbreaks$breaks)
# --
airquality &lt;- transform(airquality, Month=factor(Month))
# --
airquality &lt;- transform(airquality, Month=factor(Month))
# --
airquality ;- transform(airquality, Month=factor(Month))
# dividir graficos
par(mfrow c c(2,2), col.axis = "red")
# dividir graficos
par(mfrow c(2,2), col.axis = "red")
# dividir graficos
par(mfrow = c(2,2), col.axis = "red")
plot(1:8, las = 0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(1:8, las = 1, xlab="xlab", ylab="ylab", main="LAS = 0")
par(mfrow = c(2,2), col.axis = "red")
plot(1:8, las = 0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(1:8, las = 1, xlab="xlab", ylab="ylab", main="LAS = 1")
plot(1:8, las = 2, xlab="xlab", ylab="ylab", main="LAS = 2")
plot(1:8, las = 3, xlab="xlab", ylab="ylab", main="LAS = 3")
legend("topright", pch=1, col=c("blue", "red"))
legend("topright", pch=1, col=c("blue", "red"), legend = c("var1", "var2"))
set.seed(67)
x = rnorm(10, 5, 7)
y = rnorm(10, 7)
z = rnorm(10, 6, 7)
t = rpois(10, 9)
plot(x, y, col=123, pch=10, main="Multi scatterplot"), col.main="red",
plot(x, y, col=123, pch=10, main="Multi scatterplot", col.main="red",
cex.main=1.5, xlab="indep", ylab="depend")
?plot
# Adicionar mais variaveis
points(z, t, col="blue", pch=4)
# Adicionar mais variaveis
points(y, t, col=777, pch=9)
legend(-6, 5.9, legend=c("Nivel1", "nivel2", "nivrl3"),
col=c(123, "blue", 777), pch=c(10,4,9),
cex=0.65, bty="n")
legend(-6, 5.9, legend=c("Nivel1", "nivel2", "nivrl3"),
col=c(123, "blue", 777), pch=c(10,4,9),
cex=2.65, bty="n")
# adicionar legendas
legend(-4, 5.9, legend=c("Nivel1", "nivel2", "nivrl3"),
col=c(123, "blue", 777), pch=c(10,4,9),
cex=0.65, bty="n")
6
# adicionar legendas
legend(-6, 15.9, legend=c("Nivel1", "nivel2", "nivrl3"),
col=c(123, "blue", 777), pch=c(10,4,9),
cex=0.65, bty="n")
# adicionar legendas
legend(-6, 0.9, legend=c("Nivel1", "nivel2", "nivrl3"),
col=c(123, "blue", 777), pch=c(10,4,9),
cex=0.65, bty="n")
attach(sleep)
sleepboxplot = boxplot(data=sleep, extra ~ group,
main="duração sono",
col.main="red", ylab="horas", xlab="Dorgas")
#calculo media
means = by(extra, group, mean)
#adicionar media ao grafico
points(means, col="red")
# Boxplot horizontal
horsleepboxplot = boxplot(data=sleep, extra ~ group,
main="duração sono",
col.main="red", ylab="horas", xlab="Dorgas", horizontal=T)
# Boxplot horizontal
horsleepboxplot = boxplot(data=sleep, extra ~ group,
main="duração sono",
col.main="red", ylab="horas", xlab="Dorgas",
horizontal=T, col=c("blue", "red"))
hist(dados)
dados = cars$speed
hist(dados)
hist(dados, breaks=10)
hist(dados, label=T, breaks=c(0,5,10,20,30))
hist(dados, labels=T, breaks=10)
hist(dados, labels=T, breaks=10)
# Adicionadno linhas ao histograma
hey = hist(dados, breaks=10)
xaxis = seq(min(dados), max(dados), length=10)
yaxis = dnorm(xaxis, mean=mean(dados), sd=sd(dados))
yaxis=yaxis*diff(hey$mids)*length(dados)
lines(xaxis, yaxis, col="red")
fatias = c(40, 20, 40)
paises = c("Brasil", "Argentina", "Chile")
#unindo
paises = paste(paises, fatias)
paises = paste(paises, "%", sep="")
color()
pie(fatias, labels=paises,
col=c("darksalmon", "gainsboro", "lemonchiffon4"), main="Distribuição")
library(plotrix)
install.packages("plotrix")
library(plotrix)
pie3D(fatias, labels=paises, explode=.05,
col=c("steelblue1", "tomato2", "tan3"),
main="Distribuição de Vendas")
# Preparando os dados
casamentos <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67),
nrow = 3, byrow = T)
# Nomeando a matriz
colnames(casamentos) <- c("0","1-150","151-300",">300")
rownames(casamentos) <- c("Casado","Divorciado","Solteiro")
# Construindo o plot
barplot(casamentos)
barplot(casamentos, beside = T)
# Transposta da matriz
barplot(t(casamentos), beside = T)
# Construindo o plot
barplot(casamentos)
barplot(casamentos, beside = T)
# Transposta da matriz
barplot(t(casamentos), beside = T)
install.packages("lattice")
libray(lattice)
library(lattice)
xyplot(data=iris, groups = Specises, Sepal.Length ~ Petal.Length)
xyplot(data=iris, groups = Species, Sepal.Length ~ Petal.Length)
# Scatter plot
splom(trees)
barchart(Class ~ Freq | Sex + Age, data=as.data.frame(Titanic),
groups=Survived, stack=T, layout=c(4,1),
auto.key=list(title="Dadps titanic", columns=2))
barchart(Class ~ Freq | Sex + Age, data=as.data.frame(Titanic),
groups=Survived, stack=T, layout=c(4,1),
auto.key=list(title="Dados titanic", columns=2))
barchart(Class ~ Freq | Sex + Age, data=as.data.frame(Titanic),
groups=Survided, stack=T, layout=c(4,1 ),
auto.key=list(title="Dados Titanic", columns=2),
scales=list(x="free"))
barchart(Class ~ Freq | Sex + Age, data=as.data.frame(Titanic),
groups=Survived, stack=T, layout=c(4,1 ),
auto.key=list(title="Dados Titanic", columns=2),
scales=list(x="free"))
x = equal.count((rivers))
x
PetalLength <- equal.count(iris$Petal.Length, 4)
PetalLength
xyplot(Sepal.Length~Sepal.Width | PetalLength, data=iris)
panel.grid(h=-1, v=-1, col.line = "skyblue")
panel.xyplot(...)
panel.grid(h=-1, v=-1, col.line = "skyblue"),
panel.grid(h=-1, v=-1, col.line = "skyblue")
xyplot(Sepal.Length~Sepal.Width | PetalLength, data=iris,
panel=function(...){
panel.grid(h=-1, v=-1, col.line = "skyblue")
panel.xyplot(...)
})
# Histograma
histogram(~Sepal.Length | Species, xlab="",
data=iris, layout=c(3,1), type="density",
main="lattice Histogram", sub="Iris Dataset, Sepal Length")
#plot violino
bwplot(Species~Sepal.Length, data.iris, pane=panel.violin)
#plot violino
bwplot(Species~Sepal.Length, data=iris, pane=panel.violin)
par(mfrow=c(1,3))
cyls <- split(mtcars, mtcars$cyl)
for (i in 1:length(cyls)){
tmpdf <- cyls[[i]]
sname <- names(cyls)[i]
plot(tmpdf$wt, tmpdf$mpg,
main=paste("MPG vs Wt", sname, "Cyl"),
ylim=c(0, 40), xlab="Wt / 1,000",
ylab="MPG", pch=19, col="blue")
grid()
}
install.packages("ggmap")
installed.packages("mapproj")
map1 <- get_map(location = "Brazil", zoom = 4)
library(ggmap)
install.packages("ggmap")
install.packages("jpeg")
install.packages("ggmap")
installed.packages("mapproj")
library(mapproj)
installed.packages("mapproj")
library(ggmap)
install.packages("ggmap")
installed.packages("mapproj")
library(ggmap)
library(mapproj)
install.packages("ggmap")
library(ggmap)
library(mapproj)
installed.packages("mapproj")
installed.packages("mapproj")
library(ggmap)
library(ggmap)
library(mapproj)
install.packages("mapproj")
library(ggmap)
library(mapproj)
map1 <- get_map(location = "Brazil", zoom = 4)
google_key()
scrub_key(string, with = "xxx")
map1 <- get_map(location = "Brazil", zoom = 4, key = "AIzaSyA7Ke4GVz-xYpnX2l3jzKquMPtha0qubgg")
scrub_key("AIzaSyA7Ke4GVz-xYpnX2l3jzKquMPtha0qubgg")
map1 <- get_map(location = "Brazil", zoom = 4)
map2 <- get_map(location = "Europe", zoom = 4)
register_google(
"AIzaSyA7Ke4GVz-xYpnX2l3jzKquMPtha0qubgg",
account_type,
client,
signature,
second_limit,
day_limit,
write = FALSE
)
install.packages("mapdata")
install.packages("maps")
library(maps)
library(mapdata)
map("worldHires","Canada",
xlim=c(-141,-53),
ylim=c(40,85),
col="gray90",
fill=TRUE)
install.packages("maps")
qmap('Recife')
qmap('L69 3GP', zoom = 16)
qmap('L69 3GP', zoom = 16, maptype = 'satellite')
mapImageData1 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "satellite",
zoom = 17)
ggmap(mapImageData1,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
install.packages("networkD3")
library(networkD3)
library(networkD3)
# Gráficos de Rede, interativos
install.packages("igraph")
install.packages("networkD3")
libray(ggmap)
library(ggmap)
install.packages("downloader")
arquivo <- "crimes.zip"
unzip("crimes.zio")
unzip("crimes.zip")
setwd("~/Documents/data_science/big_data_analitycs_with_r_and_azure/r_part_4")
unzip("crimes.zip")
df <- read.csv("crimes.txt")
head(df)
mapa <- qmap("seattle", zoom=11, source="stamen",
maptype="toner", darken=c(.3, "#BBBBBB"))
mapa <- qmap("seattle", zoom=11, source="stamen",
maptype="toner", darken=c(.3, "#BBBBBB"))
mapa <- qmap("seattle", zoom=11, source="stadia",
maptype="toner", darken=c(.3, "#BBBBBB"))
mapa <- qmap("seattle", zoom=11, source="osm",
maptype="toner", darken=c(.3, "#BBBBBB"))
install.packages('osmdata')
library(osmdata)
library(osmdata)
mapa <- qmap("seattle", zoom=11, source="osm",
maptype="toner", darken=c(.3, "#BBBBBB"))
mapa <- qmap("seattle", zoom=11, source="stamen",
maptype="toner", darken=c(.3, "#BBBBBB"))
register_google()
register_google()
mapa <- qmap("seattle", zoom=11, source="stamen",
maptype="toner", darken=c(.3, "#BBBBBB"))
mapa <- qmap("seattle", zoom=11, source="google",
maptype="toner", darken=c(.3, "#BBBBBB"))
register_google()
register_google(api="AIzaSyA7Ke4GVz-xYpnX2l3jzKquMPtha0qubgg")
register_google("AIzaSyA7Ke4GVz-xYpnX2l3jzKquMPtha0qubgg")
mapa <- qmap("seattle", zoom=11, source="google",
maptype="toner", darken=c(.3, "#BBBBBB"))
mapa <- qmap("seattle", zoom=11, source="google",
maptype="stamen_toner", darken=c(.3, "#BBBBBB"))
mapa <- qmap("seattle", zoom=11, source="google",
darken=c(.3, "#BBBBBB"))
mapa
mapa + geom_point(data=df, aes(x=Longitude, y=Latitude))
mapa
google_api_key <- read.csv("key.txt")
register_google(google_api_key)
google_api_key <- read.csv("key.txt")
register_google(google_api_key)
google_api_key
register_google(str(google_api_key))
google_api_key <- readLines("key.txt")
register_google(google_api_key)
mapa + geom_point(data=df, aes(x=Longitude, y=Latitude))
mapa + geom_point(data=df, aes(x=Longitude, y=Latitude),
color="darkgreen", alpha=0.03, size=1.1)
mapa +
stat_density2d(data = df, aes(x = Longitude, y = Latitude,
color = ..density..,
size = ifelse(..density..<= 1,0,..density..),
alpha = ..density..), geom = "tile",contour = F) +
scale_color_continuous(low = "orange", high = "red", guide = "none") +
scale_size_continuous(range = c(0, 3), guide = "none") +
scale_alpha(range = c(0,.5), guide = "none") +
ggtitle("Crimes em Seattle") +
theme(plot.title = element_text(family = "Trebuchet MS", size = 36, face = "bold", hjust = 0, color = "#777777"))
arquivo <- "paris.zip"
unzip("paris.zip")
# Gerando o dataframe
df2 <- read.csv("paris.txt", sep = ",", header = T)
str(df)
dim(df)
# Criando o mapa
map.paris <- qmap("paris", source="stamen", zoom=12, maptype="toner", darken=c(.3, "#BBBBBB"))
# Criando o mapa
map.paris <- qmap("paris", source="google", zoom=12,
maptype="toner", darken=c(.3, "#BBBBBB"))
# Criando o mapa
map.paris <- qmap("paris", source="stadia", zoom=12,
maptype="toner", darken=c(.3, "#BBBBBB"))
# Criando o mapa
map.paris <- qmap("paris", source="google", zoom=12,
darken=c(.3, "#BBBBBB"))
# Unindo mapa e camada de dados
map.paris +
geom_point(data = df2, aes(x = longitude, y = latitude,
size = available_bike_stands,
color = available_bike_stands),
alpha = .9, na.rm = T) +
scale_color_gradient(low = "#33CC33", high = "#003300", name = "Número de Bikes Disponíveis") +
scale_size(range=c(1,11) , guide="none") +
ggtitle("Número de Bikes Disponíveis em Paris") +
theme(text = element_text(family = "Trebuchet MS", color = "#666666")) +
theme(plot.title = element_text( size = 32, face = "bold", hjust = 0, vjust = .5))
